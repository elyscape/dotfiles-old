#!/usr/bin/env bash

[ -f ~/.aliases.local ] && . ~/.aliases.local

alias chmox=chmod

alias ga='git add'
alias gap='git ap'
alias gbd='git bd'
alias gc='git commit'
alias gca='git ca'
alias gcac='git cac'
alias gcam='git cam'
alias gcd='cd "$( git rev-parse --show-toplevel )"'
alias gcm='git cm'
alias gco='git co'
alias gcob='git cob'
alias gd='git diff'
alias gdc='git dc'
alias gdt='git dt'
alias gdtc='git dtc'
alias gf='git fetch'
alias gfa='git fa'
alias gl='git log'
alias glf='git lf'
alias gm='git merge'
alias gmt='git mt'
alias gp='git pull'
alias gpf='git pf'
alias gpt='git pt'
alias gpu='git pu'
alias gpush='git push'
alias gpushd='pushd "$( git rev-parse --show-toplevel )"'
alias gpushup='git pushup'
alias gr='git reset'
alias grau='git rau'
alias grb='git rebase'
alias grh='git rh'
alias gs='git status'
alias gss='git ss'

alias title='echo -en "\033]0;\007"'

if [ "$( uname -s )" = 'Darwin' ]; then
  alias start=open
  alias pstree='pstree -g 3'
  alias brewup='brew update && brew upgrade --all'
  lsoptions='-F -G'
else
  lsoptions='-F --color=auto --show-control-chars'
fi
# shellcheck disable=SC2139
{
  alias ls="\ls $lsoptions"
  alias ll="\ls $lsoptions -l"
  alias l.="\ls $lsoptions -d .*"
  alias ll.="\ls $lsoptions -l -d .*"
}
unset lsoptions

alias plint='puppet-lint --no-class_inherits_from_params_class-check --no-80chars-check'

[ "$BASH_VERSINFO" -ge 4 ] || return 0

# Based on http://superuser.com/a/437508
# Automatically add completion for all aliases to commands having completion functions
function alias_completion {
  local namespace="alias_completion"

  # parse function based completion definitions, where capture group 2 => function and 3 => trigger
  local compl_regex='complete( +[^ ]+)* -F ([^ ]+) ("[^"]+"|[^ ]+)'
  # parse alias definitions, where capture group 1 => trigger, 2 => command, 3 => command arguments
  local alias_regex="alias ([^=]+)='(\"[^\"]+\"|[^ ]+)(( +[^ ]+)*)'"

  # create array of function completion triggers, keeping multi-word triggers together
  local completions
  eval "completions=($(complete -p | sed -Ene "/$compl_regex/s//'\3'/p"))"
  (( ${#completions[@]} == 0 )) && return 0

  # create temporary file for wrapper functions and completions
  rm -f "/tmp/${namespace}-*.tmp" # preliminary cleanup
  local tmp_file; tmp_file="$(mktemp "/tmp/${namespace}-${RANDOM}XXX.tmp")" || return 1

  local completion_loader; completion_loader="$(complete -p -D 2>/dev/null | sed -Ee 's/.* -F ([^ ]*).*/\1/')"

  # read in "<alias> '<aliased command>' '<command args>'" lines from defined aliases
  local line; while read line; do
    local alias_tokens
    eval "alias_tokens=($line)" 2>/dev/null || continue # some alias arg patterns cause an eval parse error
    local alias_name="${alias_tokens[0]}" alias_cmd="${alias_tokens[1]}" alias_args="${alias_tokens[2]# }"

    # skip aliases to pipes, boolean control structures and other command lists
    # (leveraging that eval errs out if $alias_args contains unquoted shell metacharacters)
    local alias_arg_words
    eval "alias_arg_words=($alias_args)" 2>/dev/null || continue
    # avoid expanding wildcards
    read -a alias_arg_words <<< "$alias_args"

    # skip alias if there is no completion function triggered by the aliased command
    # shellcheck disable=SC2076
    if [[ ! " ${completions[*]} " =~ " $alias_cmd " ]]; then
      if [[ -n "$completion_loader" ]]; then
        # force loading of completions for the aliased command
        eval "$completion_loader $alias_cmd"
        # 124 means completion loader was successful
        [[ $? -eq 124 ]] || continue
        completions+=($alias_cmd)
      else
        continue
      fi
    fi
    local new_completion; new_completion="$(complete -p "$alias_cmd")"

    # create a wrapper inserting the alias arguments if any
    if [[ -n $alias_args ]]; then
      local compl_func="${new_completion/#* -F /}"; compl_func="${compl_func%% *}"
      # avoid recursive call loops by ignoring our own functions
      if [[ "${compl_func#_$namespace::}" == "$compl_func" ]]; then
        local compl_wrapper="_${namespace}::${alias_name}"
          echo "function $compl_wrapper {
            (( COMP_CWORD += ${#alias_arg_words[@]} ))
            COMP_WORDS=($alias_cmd $alias_args \${COMP_WORDS[@]:1})
            (( COMP_POINT -= \${#COMP_LINE} ))
            COMP_LINE=\${COMP_LINE/$alias_name/$alias_cmd $alias_args}
            (( COMP_POINT += \${#COMP_LINE} ))
            $compl_func
          }" >> "$tmp_file"
          new_completion="${new_completion/ -F $compl_func / -F $compl_wrapper }"
      fi
    fi

    # replace completion trigger by alias
    new_completion="${new_completion% *} $alias_name"
    echo "$new_completion" >> "$tmp_file"
  done < <(alias -p | sed -Ene "s/$alias_regex/\1 '\2' '\3'/p")

  source "$tmp_file" && rm -f "$tmp_file"
}; alias_completion
